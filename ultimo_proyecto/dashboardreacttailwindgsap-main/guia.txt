1) npm create vite@latest .

2)  npm install react-router-dom
    npm install gsap

3)  npm install tailwindcss @tailwindcss/vite
    npm install -D @vitejs/plugin-react
    
4)  Configurar el plugin de Tailwind en Vite
    Abre vite.config.js y reemplaza su contenido por:
    
    // vite.config.js
    import { defineConfig } from 'vite'
    import react from '@vitejs/plugin-react'     
    import tailwindcss from '@tailwindcss/vite' 

    export default defineConfig({
    plugins: [
        react(),        
        tailwindcss()   
    ],
    })

   

5) Importar Tailwind CSS en tu archivo CSS
    edita src/index.css y pon solo esto:
    @import "tailwindcss";

    Limpiar 
        app.css
        
    agregar esto en el app
    export default function App() {
    return (
        <h1 className="text-3xl font-bold underline text-center p-10">
        ¡Tailwind + React + Vite funcionando perfectamente! 🎉
        </h1>
    );
    }




    # Probar que todo funciona
    Edita src/App.jsx temporalmente:

    export default function App() {
    return (
        <h1 className="text-3xl font-bold underline text-center p-10">
        ¡Tailwind + React + Vite funcionando perfectamente! 🎉
        </h1>
    );
    }

6) Generar tailwind.config.js Si quieres personalizar colores, fuentes, breakpoints, etc.:
    crea tailwind.config.js en la raiz y agrega esto

    /** @type {import('tailwindcss').Config} */
    export default {
    content: [
        "./index.html",
        "./src/**/*.{js,jsx,ts,tsx}",
    ],
    theme: {
        extend: {
        colors: {
            primary: {
            50: '#eff6ff',
            100: '#dbeafe',
            500: '#3b82f6',
            600: '#2563eb', // ← Ideal para KPIs y botones
            700: '#1d4ed8',
            },
            gray: {
            50: '#f9fafb',
            100: '#f3f4f6',
            200: '#e5e7eb',
            300: '#d1d5db',
            400: '#9ca3af',
            500: '#6b7280',
            600: '#4b5563',
            700: '#374151',
            800: '#1f2937',
            900: '#111827',
            },
        },
        },
    },
    plugins: [],
    }

7) Estructura de carpetas

src/
├── components/
│   ├── layout/          → Componentes de layout (Aside, Header, Footer, Layout)
│   └── ui/              → Componentes reutilizables de UI (Widget, Botones, Tarjetas)
│
├── contexts/            → Contextos globales (Sidebar, Tema, Autenticación)
│
├── hooks/               → Hooks personalizados (useFadeIn, useFLIP, etc.)
│
├── pages/               → Páginas principales (Dashboard, Analytics, Settings)
│
├── util/                → Funciones de utilidad (helpers, formateadores)

# En Windows (CMD)
md src\components\layout src\components\ui src\contexts src\hooks src\pages src\util

Archivos basicos 

  📁 src/
├── 📁 components/
│   ├── 📁 layout/
│   │   ├── 📄 Aside.jsx
│   │   ├── 📄 Header.jsx
│   │   ├── 📄 Footer.jsx
│   │   └── 📄 Layout.jsx
│   └── 📁 ui/
│       └── 📄 Widget.jsx
│
├── 📁 contexts/
│   └── 📄 SidebarContext.jsx
│
├── 📁 hooks/
│   └── 📄 useFadeIn.js
│
├── 📁 pages/
│   ├── 📄 DashboardPage.jsx
│   ├── 📄 AnalyticsPage.jsx
│   └── 📄 SettingsPage.jsx
│

8) Crear el Contexto del Sidebar.
    Vamos a crear un contexto que maneje el estado de apertura/cierre del sidebar y si estamos en móvil o desktop.

    // src/contexts/SidebarContext.jsx
    import { createContext, useContext, useState, useEffect } from 'react';

    const SidebarContext = createContext();

    export function useSidebar() {
    const context = useContext(SidebarContext);
    if (!context) {
        throw new Error('useSidebar must be used within a SidebarProvider');
    }
    return context;
    }

    export function SidebarProvider({ children }) {
    const [isSidebarOpen, setIsSidebarOpen] = useState(false);
    const [isMobile, setIsMobile] = useState(window.innerWidth < 768);

    useEffect(() => {
        const handleResize = () => {
        const mobile = window.innerWidth < 768;
        setIsMobile(mobile);
        
        // En móvil, cerrar sidebar por defecto
        if (mobile) {
            setIsSidebarOpen(false);
        } else {
            // En desktop, abrir sidebar por defecto
            setIsSidebarOpen(true);
        }
        };

        window.addEventListener('resize', handleResize);
        handleResize(); // Estado inicial

        return () => window.removeEventListener('resize', handleResize);
    }, []);

    const toggleSidebar = () => {
        setIsSidebarOpen(!isSidebarOpen);
    };

    const closeSidebar = () => {
        if (isMobile) {
        setIsSidebarOpen(false);
        }
    };

    const value = {
        isSidebarOpen,
        toggleSidebar,
        closeSidebar,
        isMobile
    };

    return (
        <SidebarContext.Provider value={value}>
        {children}
        </SidebarContext.Provider>
    );
    }


Envolver la App con el Proveedor del Sidebar
    // src/main.jsx
    import React from 'react';
    import ReactDOM from 'react-dom/client';
    import App from './App.jsx';
    import './index.css';
    import { SidebarProvider } from './contexts/SidebarContext';

    ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <SidebarProvider>
        <App />
        </SidebarProvider>
    </React.StrictMode>,
    );
